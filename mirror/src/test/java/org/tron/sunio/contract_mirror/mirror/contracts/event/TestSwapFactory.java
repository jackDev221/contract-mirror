package org.tron.sunio.contract_mirror.mirror.contracts.event;import org.junit.jupiter.api.Test;import org.springframework.util.Assert;import org.tron.sunio.contract_mirror.event_decode.events.SwapV1FactoryEvent;import org.tron.sunio.contract_mirror.event_decode.events.SwapV2FactoryEvent;import org.tron.sunio.contract_mirror.mirror.contracts.BaseContract;import org.tron.sunio.contract_mirror.mirror.contracts.events.IContractEventWrap;import org.tron.sunio.contract_mirror.mirror.contracts.factory.SwapFactoryV1;import org.tron.sunio.contract_mirror.mirror.contracts.factory.SwapFactoryV2;import org.tron.sunio.contract_mirror.mirror.contracts.impl.SwapV1;import org.tron.sunio.contract_mirror.mirror.contracts.impl.SwapV2Pair;import org.tron.sunio.contract_mirror.mirror.utils.EventLogUtils;import org.tron.sunio.tronsdk.WalletUtil;import java.util.List;public class TestSwapFactory {    @Test    public void testFactoryV1() {        String factoryAddress = "TXFouUxm4Qs3c1VxfQtCo4xMxbpwE3aWDM";        SwapFactoryV1 factoryV1 = new SwapFactoryV1(                factoryAddress,                null,                null,                SwapV1FactoryEvent.getSigMap()        );        factoryV1.setReady(true);        factoryV1.setAddExchangeContracts(true);        IContractEventWrap log0 = EventLogUtils.generateContractEvent(                "tx0",                new String[]{                        "9d42cb017eb05bd8944ab536a8b35bc68085931dd5f4356489801453923953f9",                        "0000000000000000000000008cee5480b41778ca45a0d649e1250a496c7364ad",                        "0000000000000000000000007b2833b52c9bf3cf3367b7d79fb7e0e9e13b664d"                },                ""        );        factoryV1.handleEvent(log0);        List<BaseContract> res = factoryV1.getListContracts(null);        Assert.isTrue(res.size() == 1, "Return list baseContracts size wrong!");        SwapV1 v1 = (SwapV1) res.get(0);        Assert.isTrue(v1.getAddress().equals(WalletUtil.hexStringToTron("0000000000000000000000007b2833b52c9bf3cf3367b7d79fb7e0e9e13b664d")), "Address not equal");        Assert.isTrue(v1.getSwapV1Data().getTokenAddress().equals(WalletUtil.hexStringToTron("0000000000000000000000008cee5480b41778ca45a0d649e1250a496c7364ad")), "Token address not equal");        Assert.isTrue(v1.getSwapV1Data().getFactory().equals(factoryAddress), "Factory address not equal");    }    @Test    public void testFactoryV2() {        String factoryAddress = "TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY";        SwapFactoryV2 factoryV2 = new SwapFactoryV2(                factoryAddress,                null,                null,                SwapV2FactoryEvent.getSigMap()        );        factoryV2.setReady(true);        factoryV2.setAddExchangeContracts(true);        IContractEventWrap log0 = EventLogUtils.generateContractEvent(                "tx0",                new String[]{                        "0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",                        "000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c",                        "000000000000000000000000c5aaffe08944b8353ffdce1443d513d142a16975"                },                "0000000000000000000000003e368c8faa56383ca09d7c3e64c7d5ef66e4e6d9000000000000000000000000000000000000000000000000000000000000059b"        );        factoryV2.handleEvent(log0);        List<BaseContract> res = factoryV2.getListContracts(null);        Assert.isTrue(res.size() == 1, "Return list baseContracts size wrong!");        SwapV2Pair v2 = (SwapV2Pair) res.get(0);        Assert.isTrue(v2.getAddress().equals(WalletUtil.hexStringToTron("0000000000000000000000003e368c8faa56383ca09d7c3e64c7d5ef66e4e6d9")), "Address not equal");        Assert.isTrue(v2.getSwapV2PairData().getFactory().equals(factoryAddress), "Factory address not equal");    }}