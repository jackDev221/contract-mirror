buildscript {
    ext {

    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
}

plugins {
    id 'java'
    id 'test-report-aggregation'
    id 'jacoco-report-aggregation'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    version = projectVersion
    group = 'org.tron.defi'
    description = 'contract mirror'

    repositories {
        mavenLocal()
        mavenCentral()
        google()

        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/repository/public/'
        }

        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/nexus/content/repositories/google'
        }

        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }

    configurations {
        // 所有需要忽略的包定义在此
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        withSourcesJar()
    }

    // general dependencies
    dependencies {
        implementation "com.google.guava:guava:${guavaVersion}"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    }

    testing {
        suites {
            test {
                useJUnitJupiter()
            }

            integrationTest(JvmTestSuite) {
                dependencies {
                    implementation project()
                }

                targets {
                    all {
                        testTask.configure {
                            shouldRunAfter(test)
                        }
                    }
                }
            }
        }
    }

    tasks.named('check') {
        dependsOn(testing.suites.integrationTest)
    }
}

dependencies {
    testReportAggregation subprojects
    jacocoAggregation subprojects
}

testCodeCoverageReport {
    reports {
        csv.required = true;
        xml.required = false
    }
}

reporting {
    reports {
        testAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.UNIT_TEST
        }
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testAggregateTestReport', TestReport)
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}
