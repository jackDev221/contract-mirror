buildscript {
    ext {

    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

    dependencies {
        classpath "org.jacoco:org.jacoco.core:0.8.5"
        classpath "org.jacoco:org.jacoco.agent:0.8.5"
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: "jacoco"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    version = projectVersion
    group = 'org.tron.sunio'
    description = 'contract mirror'

    repositories {
        mavenLocal()
        mavenCentral()
        google()

        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/repository/public/'
        }

        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/nexus/content/repositories/google'
        }

        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }

    configurations {
        // 所有需要忽略的包定义在此

    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        withSourcesJar()
    }

    // general dependencies
    dependencies {
        // FOR KAFKA LOG
//        implementation("ch.qos.logback:logback-classic:${logbackClassicVersion}")
//        implementation("com.github.danielwegener:logback-kafka-appender:${logbackKafkaAppenderVersion}")
//        implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}")
        implementation("org.apache.kafka:kafka-clients:${kafkaVersion}")

        implementation("org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion")
        implementation 'com.github.pcj:google-options:1.0.0'

        implementation("javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}")
        implementation("javax.xml.bind:jaxb-api:${jaxbApiVersion}")
        implementation("javax.activation:activation:${javaxActivationVersion}")
        implementation('javax.validation:validation-api:2.0.1.Final')
        implementation("org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}")
        implementation("com.sun.xml.bind:jaxb-core:${jaxbCoreVersion}")
        implementation("com.sun.xml.bind:jaxb-impl:${jaxbImplVersion}")

        implementation("org.springframework.boot:spring-boot-starter:$springBootVersion")
        // jpa
//        implementation("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
        implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
        implementation("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
        implementation("org.springframework.boot:spring-boot-starter-hateoas:$springBootVersion")
        // database
//        implementation("mysql:mysql-connector-java:${mysqlconnectorVersion}")
        implementation("io.micrometer:micrometer-core:${micrometerVersion}")
        implementation("io.micrometer:micrometer-registry-prometheus:${micrometerVersion}")
        implementation("cn.hutool:hutool-all:$hutoolVersion")
        implementation("io.springfox:springfox-boot-starter:$swaggerVersion")
        implementation('org.hibernate.validator:hibernate-validator:6.0.13.Final')
        implementation("org.apache.commons:commons-collections4:4.4")
        implementation("org.web3j:crypto:$web3jVersion")
        implementation("org.web3j:core:$web3jVersion")
        implementation("org.web3j:utils:$web3jVersion")
        implementation("org.web3j:abi:${web3jVersion}")
        implementation("org.web3j:rlp:${web3jVersion}")
        implementation("com.google.guava:guava:$guavaVersion")
        implementation("com.google.code.gson:gson:$gsonVersion")

        implementation("org.redisson:redisson:$redissonVersion")
        implementation("org.apache.commons:commons-lang3:$commonsLong3Version")
        implementation("com.github.ben-manes.caffeine:caffeine:$caffeineVersion")
        implementation("org.apache.commons:commons-collections4:4.4")

        implementation("org.apache.httpcomponents:httpclient:${httpclientVersion}")
        implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
        implementation("cn.hutool:hutool-all:$hutoolVersion")

        testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
        testImplementation("org.jacoco:org.jacoco.agent:$jacocoVersion")
        testImplementation("org.mockito:mockito-core:$mockitoVersion")
        testImplementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")

        testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
        testImplementation("it.ozimov:embedded-redis:0.7.3")

        testImplementation("org.awaitility:awaitility:$awaitilityVersion")
        testImplementation("org.awaitility:awaitility-proxy:$awaitilityProxyVersion")

        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"


        testImplementation 'org.openjdk.jmh:jmh-core:1.29'
        testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.29'
        testImplementation 'com.h2database:h2:2.1.210'
    }

    wrapper {
        gradleVersion = '6.9'
        distributionType = Wrapper.DistributionType.ALL
    }

    tasks.withType(ProcessResources) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    tasks.withType(Jar) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    dependencyManagement {
        imports {
            mavenBom "com.squareup.okhttp3:okhttp-bom:4.9.0"
        }
    }

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

    jacoco {
        toolVersion = "0.8.5"
        reportsDirectory = file("$buildDir/jacoco")
    }

    test {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            html.enabled true
        }
    }
}

subprojects {
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        withSourcesJar()
    }


    dependencies {
    }

    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "src/main/configs"
            }
        }
    }

    apply from: "$rootDir/gradle/config/scripts/coverage.gradle"

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

}